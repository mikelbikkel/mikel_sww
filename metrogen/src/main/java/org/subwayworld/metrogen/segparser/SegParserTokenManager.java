/* Generated By:JavaCC: Do not edit this line. SegParserTokenManager.java */
package org.subwayworld.metrogen.segparser;

/** Token Manager. */
public class SegParserTokenManager implements SegParserConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;

  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  private final int jjStopStringLiteralDfa_0(int pos, long active0) {
    switch (pos) {
    case 0:
      if ((active0 & 0x1ffffffffffc0L) != 0L) {
        jjmatchedKind = 49;
        return 8;
      }
      return -1;
    case 1:
      if ((active0 & 0x1ffffffffffc0L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 1;
        return 8;
      }
      return -1;
    case 2:
      if ((active0 & 0x1ffffffffffc0L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 2;
        return 8;
      }
      return -1;
    case 3:
      if ((active0 & 0xffc003fc000L) != 0L)
        return 8;
      if ((active0 & 0x1f003ffc03fc0L) != 0L) {
        if (jjmatchedPos != 3) {
          jjmatchedKind = 49;
          jjmatchedPos = 3;
        }
        return 8;
      }
      return -1;
    case 4:
      if ((active0 & 0x300000000L) != 0L)
        return 8;
      if ((active0 & 0x1fbbcffffbfc0L) != 0L) {
        if (jjmatchedPos != 4) {
          jjmatchedKind = 49;
          jjmatchedPos = 4;
        }
        return 8;
      }
      return -1;
    case 5:
      if ((active0 & 0xc0000000L) != 0L)
        return 8;
      if ((active0 & 0x1fbbe3fffbfc0L) != 0L) {
        if (jjmatchedPos != 5) {
          jjmatchedKind = 49;
          jjmatchedPos = 5;
        }
        return 8;
      }
      return -1;
    case 6:
      if ((active0 & 0xa1c0L) != 0L)
        return 8;
      if ((active0 & 0x1fbbebfff1e00L) != 0L) {
        if (jjmatchedPos != 6) {
          jjmatchedKind = 49;
          jjmatchedPos = 6;
        }
        return 8;
      }
      return -1;
    case 7:
      if ((active0 & 0x1f33ebfc02100L) != 0L) {
        if (jjmatchedPos != 7) {
          jjmatchedKind = 49;
          jjmatchedPos = 7;
        }
        return 8;
      }
      if ((active0 & 0x880003f1e00L) != 0L)
        return 8;
      return -1;
    case 8:
      if ((active0 & 0x33200000000L) != 0L)
        return 8;
      if ((active0 & 0x1f00cbfea3500L) != 0L) {
        if (jjmatchedPos != 8) {
          jjmatchedKind = 49;
          jjmatchedPos = 8;
        }
        return 8;
      }
      return -1;
    case 9:
      if ((active0 & 0x1f22c3fea1400L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 9;
        return 8;
      }
      if ((active0 & 0x80002100L) != 0L)
        return 8;
      return -1;
    case 10:
      if ((active0 & 0xc03001400L) != 0L)
        return 8;
      if ((active0 & 0x1f2203cea0000L) != 0L) {
        if (jjmatchedPos != 10) {
          jjmatchedKind = 49;
          jjmatchedPos = 10;
        }
        return 8;
      }
      return -1;
    case 11:
      if ((active0 & 0x2a0000L) != 0L)
        return 8;
      if ((active0 & 0x1f2283ec00000L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 11;
        return 8;
      }
      return -1;
    case 12:
      if ((active0 & 0x1f0083ec00000L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 12;
        return 8;
      }
      if ((active0 & 0x22000000000L) != 0L)
        return 8;
      return -1;
    case 13:
      if ((active0 & 0x1f0083cc00000L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 13;
        return 8;
      }
      if ((active0 & 0x2000000L) != 0L)
        return 8;
      return -1;
    case 14:
      if ((active0 & 0x1f00000c00000L) != 0L) {
        if (jjmatchedPos != 14) {
          jjmatchedKind = 49;
          jjmatchedPos = 14;
        }
        return 8;
      }
      if ((active0 & 0x83c000000L) != 0L)
        return 8;
      return -1;
    case 15:
      if ((active0 & 0x800028000000L) != 0L) {
        if (jjmatchedPos != 15) {
          jjmatchedKind = 49;
          jjmatchedPos = 15;
        }
        return 8;
      }
      if ((active0 & 0x1700000c00000L) != 0L)
        return 8;
      return -1;
    case 16:
      if ((active0 & 0x800000000000L) != 0L)
        return 8;
      if ((active0 & 0x1200028800000L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 16;
        return 8;
      }
      return -1;
    case 17:
      if ((active0 & 0x1200028800000L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 17;
        return 8;
      }
      return -1;
    case 18:
      if ((active0 & 0x28000000L) != 0L)
        return 8;
      if ((active0 & 0x1200000800000L) != 0L) {
        jjmatchedKind = 49;
        jjmatchedPos = 18;
        return 8;
      }
      return -1;
    default:
      return -1;
    }
  }

  private final int jjStartNfa_0(int pos, long active0) {
    return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa1_0(0x300000000L);
    case 66:
      return jjMoveStringLiteralDfa1_0(0xc0000600L);
    case 67:
      return jjMoveStringLiteralDfa1_0(0xfc000L);
    case 70:
      return jjMoveStringLiteralDfa1_0(0x180L);
    case 76:
      return jjMoveStringLiteralDfa1_0(0x3fc00300000L);
    case 77:
      return jjMoveStringLiteralDfa1_0(0xcc00000L);
    case 78:
      return jjMoveStringLiteralDfa1_0(0xc0000000000L);
    case 79:
      return jjMoveStringLiteralDfa1_0(0x1f00000000000L);
    case 83:
      return jjMoveStringLiteralDfa1_0(0x3003840L);
    case 84:
      return jjMoveStringLiteralDfa1_0(0x30000000L);
    default:
      return jjMoveNfa_0(0, 0);
    }
  }

  private int jjMoveStringLiteralDfa1_0(long active0) {
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa2_0(active0, 0xc0000000600L);
    case 69:
      return jjMoveStringLiteralDfa2_0(active0, 0xcf002040L);
    case 70:
      return jjMoveStringLiteralDfa2_0(active0, 0x300000000L);
    case 73:
      return jjMoveStringLiteralDfa2_0(active0, 0x3fc003fc000L);
    case 79:
      return jjMoveStringLiteralDfa2_0(active0, 0x180L);
    case 82:
      return jjMoveStringLiteralDfa2_0(active0, 0x30000000L);
    case 84:
      return jjMoveStringLiteralDfa2_0(active0, 0x1800L);
    case 85:
      return jjMoveStringLiteralDfa2_0(active0, 0xc00000L);
    case 86:
      return jjMoveStringLiteralDfa2_0(active0, 0x1f00000000000L);
    default:
      break;
    }
    return jjStartNfa_0(0, active0);
  }

  private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa3_0(active0, 0x30001800L);
    case 67:
      return jjMoveStringLiteralDfa3_0(active0, 0x600L);
    case 69:
      return jjMoveStringLiteralDfa3_0(active0, 0x1f00000000000L);
    case 70:
      return jjMoveStringLiteralDfa3_0(active0, 0xc0000000L);
    case 71:
      return jjMoveStringLiteralDfa3_0(active0, 0x2040L);
    case 76:
      return jjMoveStringLiteralDfa3_0(active0, 0xc00000L);
    case 77:
      return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L);
    case 78:
      return jjMoveStringLiteralDfa3_0(active0, 0x3fc00300000L);
    case 82:
      return jjMoveStringLiteralDfa3_0(active0, 0x3000180L);
    case 84:
      return jjMoveStringLiteralDfa3_0(active0, 0x30c0fc000L);
    default:
      break;
    }
    return jjStartNfa_0(1, active0);
  }

  private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
    }
    switch (curChar) {
    case 69:
      if ((active0 & 0x4000000000L) != 0L) {
        jjmatchedKind = 38;
        jjmatchedPos = 3;
      } else if ((active0 & 0x40000000000L) != 0L) {
        jjmatchedKind = 42;
        jjmatchedPos = 3;
      }
      return jjMoveStringLiteralDfa4_0(active0, 0xbbf00300000L);
    case 75:
      return jjMoveStringLiteralDfa4_0(active0, 0x600L);
    case 77:
      return jjMoveStringLiteralDfa4_0(active0, 0x2040L);
    case 78:
      return jjMoveStringLiteralDfa4_0(active0, 0x30000000L);
    case 79:
      return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L);
    case 82:
      return jjMoveStringLiteralDfa4_0(active0, 0x1f0000c000000L);
    case 84:
      return jjMoveStringLiteralDfa4_0(active0, 0xc01800L);
    case 86:
      return jjMoveStringLiteralDfa4_0(active0, 0x3000000L);
    case 87:
      return jjMoveStringLiteralDfa4_0(active0, 0x180L);
    case 89:
      if ((active0 & 0x4000L) != 0L) {
        jjmatchedKind = 14;
        jjmatchedPos = 3;
      }
      return jjMoveStringLiteralDfa4_0(active0, 0xf8000L);
    default:
      break;
    }
    return jjStartNfa_0(2, active0);
  }

  private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa5_0(active0, 0x180L);
    case 67:
      return jjMoveStringLiteralDfa5_0(active0, 0x30000L);
    case 69:
      return jjMoveStringLiteralDfa5_0(active0, 0xa040L);
    case 73:
      return jjMoveStringLiteralDfa5_0(active0, 0x3c01800L);
    case 78:
      return jjMoveStringLiteralDfa5_0(active0, 0xc0000L);
    case 79:
      return jjMoveStringLiteralDfa5_0(active0, 0xc000000L);
    case 82:
      if ((active0 & 0x100000000L) != 0L) {
        jjmatchedKind = 32;
        jjmatchedPos = 4;
      }
      return jjMoveStringLiteralDfa5_0(active0, 0x1f002c0000000L);
    case 83:
      return jjMoveStringLiteralDfa5_0(active0, 0x30000000L);
    case 84:
      return jjMoveStringLiteralDfa5_0(active0, 0x300000L);
    case 87:
      return jjMoveStringLiteralDfa5_0(active0, 0x600L);
    case 95:
      return jjMoveStringLiteralDfa5_0(active0, 0xbbc00000000L);
    default:
      break;
    }
    return jjStartNfa_0(3, active0);
  }

  private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa6_0(active0, 0xc0600L);
    case 67:
      return jjMoveStringLiteralDfa6_0(active0, 0x3000000L);
    case 69:
      if ((active0 & 0x40000000L) != 0L) {
        jjmatchedKind = 30;
        jjmatchedPos = 5;
      }
      return jjMoveStringLiteralDfa6_0(active0, 0x8b080000000L);
    case 70:
      return jjMoveStringLiteralDfa6_0(active0, 0x30000000L);
    case 73:
      return jjMoveStringLiteralDfa6_0(active0, 0x1f00000000000L);
    case 78:
      return jjMoveStringLiteralDfa6_0(active0, 0x3000000a040L);
    case 79:
      return jjMoveStringLiteralDfa6_0(active0, 0x31800L);
    case 82:
      return jjMoveStringLiteralDfa6_0(active0, 0xc00000180L);
    case 89:
      return jjMoveStringLiteralDfa6_0(active0, 0x300000L);
    case 95:
      return jjMoveStringLiteralDfa6_0(active0, 0x20cc00000L);
    default:
      break;
    }
    return jjStartNfa_0(4, active0);
  }

  private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa7_0(active0, 0x30000000000L);
    case 68:
      if ((active0 & 0x80L) != 0L) {
        jjmatchedKind = 7;
        jjmatchedPos = 6;
      } else if ((active0 & 0x8000L) != 0L)
        return jjStartNfaWithStates_0(6, 15, 8);
      return jjMoveStringLiteralDfa7_0(active0, 0x1f03000030100L);
    case 69:
      return jjMoveStringLiteralDfa7_0(active0, 0xe03000000L);
    case 77:
      return jjMoveStringLiteralDfa7_0(active0, 0xc0000L);
    case 78:
      return jjMoveStringLiteralDfa7_0(active0, 0x88000c01800L);
    case 79:
      return jjMoveStringLiteralDfa7_0(active0, 0x30000000L);
    case 80:
      return jjMoveStringLiteralDfa7_0(active0, 0x300000L);
    case 82:
      return jjMoveStringLiteralDfa7_0(active0, 0x600L);
    case 84:
      if ((active0 & 0x40L) != 0L) {
        jjmatchedKind = 6;
        jjmatchedPos = 6;
      }
      return jjMoveStringLiteralDfa7_0(active0, 0xc002000L);
    case 95:
      return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
    default:
      break;
    }
    return jjStartNfa_0(5, active0);
  }

  private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa8_0(active0, 0xc00000L);
    case 68:
      if ((active0 & 0x200L) != 0L) {
        jjmatchedKind = 9;
        jjmatchedPos = 7;
      } else if ((active0 & 0x8000000000L) != 0L)
        return jjStartNfaWithStates_0(7, 39, 8);
      else if ((active0 & 0x80000000000L) != 0L)
        return jjStartNfaWithStates_0(7, 43, 8);
      return jjMoveStringLiteralDfa8_0(active0, 0x400L);
    case 69:
      if ((active0 & 0x10000L) != 0L) {
        jjmatchedKind = 16;
        jjmatchedPos = 7;
      } else if ((active0 & 0x40000L) != 0L) {
        jjmatchedKind = 18;
        jjmatchedPos = 7;
      } else if ((active0 & 0x100000L) != 0L) {
        jjmatchedKind = 20;
        jjmatchedPos = 7;
      }
      return jjMoveStringLiteralDfa8_0(active0, 0x1f000802a2100L);
    case 73:
      return jjMoveStringLiteralDfa8_0(active0, 0x3000000000L);
    case 77:
      return jjMoveStringLiteralDfa8_0(active0, 0x30c00000000L);
    case 78:
      return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
    case 82:
      return jjMoveStringLiteralDfa8_0(active0, 0x3c000000L);
    case 83:
      if ((active0 & 0x800L) != 0L) {
        jjmatchedKind = 11;
        jjmatchedPos = 7;
      }
      return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
    case 84:
      return jjMoveStringLiteralDfa8_0(active0, 0x3000000L);
    default:
      break;
    }
    return jjStartNfa_0(6, active0);
  }

  private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa9_0(active0, 0xc0c000000L);
    case 68:
      if ((active0 & 0x200000000L) != 0L)
        return jjStartNfaWithStates_0(8, 33, 8);
      break;
    case 69:
      if ((active0 & 0x10000000000L) != 0L) {
        jjmatchedKind = 40;
        jjmatchedPos = 8;
      }
      return jjMoveStringLiteralDfa9_0(active0, 0x20000001400L);
    case 77:
      return jjMoveStringLiteralDfa9_0(active0, 0x30c00000L);
    case 78:
      return jjMoveStringLiteralDfa9_0(active0, 0x80002100L);
    case 84:
      if ((active0 & 0x1000000000L) != 0L) {
        jjmatchedKind = 36;
        jjmatchedPos = 8;
      }
      return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
    case 89:
      return jjMoveStringLiteralDfa9_0(active0, 0x3000000L);
    case 95:
      return jjMoveStringLiteralDfa9_0(active0, 0x1f000002a0000L);
    default:
      break;
    }
    return jjStartNfa_0(7, active0);
  }

  private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x100L) != 0L)
        return jjStartNfaWithStates_0(9, 8, 8);
      else if ((active0 & 0x2000L) != 0L)
        return jjStartNfaWithStates_0(9, 13, 8);
      else if ((active0 & 0x80000000L) != 0L)
        return jjStartNfaWithStates_0(9, 31, 8);
      break;
    case 69:
      return jjMoveStringLiteralDfa10_0(active0, 0xea0000L);
    case 78:
      return jjMoveStringLiteralDfa10_0(active0, 0xc001400L);
    case 80:
      return jjMoveStringLiteralDfa10_0(active0, 0x3000000L);
    case 82:
      return jjMoveStringLiteralDfa10_0(active0, 0xc00000000L);
    case 83:
      return jjMoveStringLiteralDfa10_0(active0, 0x1f00000000000L);
    case 95:
      return jjMoveStringLiteralDfa10_0(active0, 0x22030000000L);
    default:
      break;
    }
    return jjStartNfa_0(8, active0);
  }

  private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x400L) != 0L)
        return jjStartNfaWithStates_0(10, 10, 8);
      else if ((active0 & 0x1000L) != 0L)
        return jjStartNfaWithStates_0(10, 12, 8);
      return jjMoveStringLiteralDfa11_0(active0, 0xc00000L);
    case 69:
      if ((active0 & 0x1000000L) != 0L) {
        jjmatchedKind = 24;
        jjmatchedPos = 10;
      }
      return jjMoveStringLiteralDfa11_0(active0, 0x1722002000000L);
    case 75:
      if ((active0 & 0x400000000L) != 0L) {
        jjmatchedKind = 34;
        jjmatchedPos = 10;
      }
      return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
    case 78:
      return jjMoveStringLiteralDfa11_0(active0, 0x2a0000L);
    case 80:
      return jjMoveStringLiteralDfa11_0(active0, 0x30000000L);
    case 83:
      return jjMoveStringLiteralDfa11_0(active0, 0xc000000L);
    case 84:
      return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
    default:
      break;
    }
    return jjStartNfa_0(9, active0);
  }

  private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
    }
    switch (curChar) {
    case 65:
      return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
    case 67:
      return jjMoveStringLiteralDfa12_0(active0, 0x1400000000000L);
    case 68:
      if ((active0 & 0x20000L) != 0L)
        return jjStartNfaWithStates_0(11, 17, 8);
      else if ((active0 & 0x80000L) != 0L)
        return jjStartNfaWithStates_0(11, 19, 8);
      else if ((active0 & 0x200000L) != 0L)
        return jjStartNfaWithStates_0(11, 21, 8);
      break;
    case 69:
      return jjMoveStringLiteralDfa12_0(active0, 0x2000000L);
    case 70:
      return jjMoveStringLiteralDfa12_0(active0, 0xc000000L);
    case 71:
      return jjMoveStringLiteralDfa12_0(active0, 0x300000000000L);
    case 78:
      return jjMoveStringLiteralDfa12_0(active0, 0x22000000000L);
    case 79:
      return jjMoveStringLiteralDfa12_0(active0, 0x30000000L);
    case 95:
      return jjMoveStringLiteralDfa12_0(active0, 0x800c00000L);
    default:
      break;
    }
    return jjStartNfa_0(10, active0);
  }

  private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x2000000000L) != 0L)
        return jjStartNfaWithStates_0(12, 37, 8);
      else if ((active0 & 0x20000000000L) != 0L)
        return jjStartNfaWithStates_0(12, 41, 8);
      break;
    case 69:
      return jjMoveStringLiteralDfa13_0(active0, 0x800000000L);
    case 73:
      return jjMoveStringLiteralDfa13_0(active0, 0x30000000L);
    case 77:
      return jjMoveStringLiteralDfa13_0(active0, 0x300000000000L);
    case 78:
      return jjMoveStringLiteralDfa13_0(active0, 0x2c00000L);
    case 79:
      return jjMoveStringLiteralDfa13_0(active0, 0xc000000L);
    case 84:
      return jjMoveStringLiteralDfa13_0(active0, 0x1c00000000000L);
    default:
      break;
    }
    return jjStartNfa_0(11, active0);
  }

  private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x2000000L) != 0L)
        return jjStartNfaWithStates_0(13, 25, 8);
      break;
    case 69:
      return jjMoveStringLiteralDfa14_0(active0, 0x300000000000L);
    case 73:
      return jjMoveStringLiteralDfa14_0(active0, 0x1c00000000000L);
    case 78:
      return jjMoveStringLiteralDfa14_0(active0, 0x830000000L);
    case 79:
      return jjMoveStringLiteralDfa14_0(active0, 0xc00000L);
    case 82:
      return jjMoveStringLiteralDfa14_0(active0, 0xc000000L);
    default:
      break;
    }
    return jjStartNfa_0(12, active0);
  }

  private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x800000000L) != 0L)
        return jjStartNfaWithStates_0(14, 35, 8);
      return jjMoveStringLiteralDfa15_0(active0, 0xc00000L);
    case 77:
      if ((active0 & 0x4000000L) != 0L) {
        jjmatchedKind = 26;
        jjmatchedPos = 14;
      }
      return jjMoveStringLiteralDfa15_0(active0, 0x8000000L);
    case 78:
      return jjMoveStringLiteralDfa15_0(active0, 0x300000000000L);
    case 79:
      return jjMoveStringLiteralDfa15_0(active0, 0x1c00000000000L);
    case 84:
      if ((active0 & 0x10000000L) != 0L) {
        jjmatchedKind = 28;
        jjmatchedPos = 14;
      }
      return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
    default:
      break;
    }
    return jjStartNfa_0(13, active0);
  }

  private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
    }
    switch (curChar) {
    case 69:
      if ((active0 & 0x400000L) != 0L) {
        jjmatchedKind = 22;
        jjmatchedPos = 15;
      }
      return jjMoveStringLiteralDfa16_0(active0, 0x800000L);
    case 78:
      if ((active0 & 0x400000000000L) != 0L) {
        jjmatchedKind = 46;
        jjmatchedPos = 15;
      }
      return jjMoveStringLiteralDfa16_0(active0, 0x1800000000000L);
    case 84:
      if ((active0 & 0x100000000000L) != 0L) {
        jjmatchedKind = 44;
        jjmatchedPos = 15;
      }
      return jjMoveStringLiteralDfa16_0(active0, 0x200000000000L);
    case 95:
      return jjMoveStringLiteralDfa16_0(active0, 0x28000000L);
    default:
      break;
    }
    return jjStartNfa_0(14, active0);
  }

  private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
    }
    switch (curChar) {
    case 69:
      return jjMoveStringLiteralDfa17_0(active0, 0x28000000L);
    case 83:
      if ((active0 & 0x800000000000L) != 0L)
        return jjStartNfaWithStates_0(16, 47, 8);
      break;
    case 95:
      return jjMoveStringLiteralDfa17_0(active0, 0x1200000800000L);
    default:
      break;
    }
    return jjStartNfa_0(15, active0);
  }

  private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
    }
    switch (curChar) {
    case 69:
      return jjMoveStringLiteralDfa18_0(active0, 0x1200000800000L);
    case 78:
      return jjMoveStringLiteralDfa18_0(active0, 0x28000000L);
    default:
      break;
    }
    return jjStartNfa_0(16, active0);
  }

  private int jjMoveStringLiteralDfa18_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x8000000L) != 0L)
        return jjStartNfaWithStates_0(18, 27, 8);
      else if ((active0 & 0x20000000L) != 0L)
        return jjStartNfaWithStates_0(18, 29, 8);
      break;
    case 78:
      return jjMoveStringLiteralDfa19_0(active0, 0x1200000800000L);
    default:
      break;
    }
    return jjStartNfa_0(17, active0);
  }

  private int jjMoveStringLiteralDfa19_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
    }
    switch (curChar) {
    case 68:
      if ((active0 & 0x800000L) != 0L)
        return jjStartNfaWithStates_0(19, 23, 8);
      else if ((active0 & 0x200000000000L) != 0L)
        return jjStartNfaWithStates_0(19, 45, 8);
      else if ((active0 & 0x1000000000000L) != 0L)
        return jjStartNfaWithStates_0(19, 48, 8);
      break;
    default:
      break;
    }
    return jjStartNfa_0(18, active0);
  }

  private int jjStartNfaWithStates_0(int pos, int kind, int state) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    try {
      curChar = input_stream.readChar();
    } catch (java.io.IOException e) {
      return pos + 1;
    }
    return jjMoveNfa_0(state, pos + 1);
  }

  static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL,
      0xffffffffffffffffL, 0xffffffffffffffffL };
  static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL,
      0xffffffffffffffffL };

  private int jjMoveNfa_0(int startState, int curPos) {
    int startsAt = 0;
    jjnewStateCnt = 9;
    int i = 1;
    jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (;;) {
      if (++jjround == 0x7fffffff)
        ReInitRounds();
      if (curChar < 64) {
        long l = 1L << curChar;
        do {
          switch (jjstateSet[--i]) {
          case 0:
            if ((0x3ff000000000000L & l) != 0L) {
              if (kind > 49)
                kind = 49;
              jjCheckNAdd(8);
            } else if (curChar == 34)
              jjCheckNAddTwoStates(6, 7);
            else if (curChar == 35)
              jjCheckNAddStates(0, 2);
            break;
          case 1:
            if ((0xffffffffffffdbffL & l) != 0L)
              jjCheckNAddStates(0, 2);
            break;
          case 2:
            if ((0x2400L & l) != 0L && kind > 5)
              kind = 5;
            break;
          case 3:
            if (curChar == 10 && kind > 5)
              kind = 5;
            break;
          case 4:
            if (curChar == 13)
              jjstateSet[jjnewStateCnt++] = 3;
            break;
          case 5:
            if (curChar == 34)
              jjCheckNAddTwoStates(6, 7);
            break;
          case 6:
            if ((0xfffffffbffffffffL & l) != 0L)
              jjCheckNAddTwoStates(6, 7);
            break;
          case 7:
            if (curChar == 34 && kind > 49)
              kind = 49;
            break;
          case 8:
            if ((0x3ff000000000000L & l) == 0L)
              break;
            if (kind > 49)
              kind = 49;
            jjCheckNAdd(8);
            break;
          default:
            break;
          }
        } while (i != startsAt);
      } else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
          case 0:
          case 8:
            if ((0x7fffffe87fffffeL & l) == 0L)
              break;
            if (kind > 49)
              kind = 49;
            jjCheckNAdd(8);
            break;
          case 1:
            jjAddStates(0, 2);
            break;
          case 6:
            jjAddStates(3, 4);
            break;
          default:
            break;
          }
        } while (i != startsAt);
      } else {
        int hiByte = (curChar >> 8);
        int i1 = hiByte >> 6;
        long l1 = 1L << (hiByte & 077);
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        do {
          switch (jjstateSet[--i]) {
          case 1:
            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
              jjAddStates(0, 2);
            break;
          case 6:
            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
              jjAddStates(3, 4);
            break;
          default:
            break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
        return curPos;
      try {
        curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  static final int[] jjnextStates = { 1, 2, 4, 6, 7, };

  private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1,
      long l2) {
    switch (hiByte) {
    case 0:
      return ((jjbitVec2[i2] & l2) != 0L);
    default:
      if ((jjbitVec0[i1] & l1) != 0L)
        return true;
      return false;
    }
  }

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {
      "",
      null,
      null,
      null,
      null,
      null,
      "\123\105\107\115\105\116\124",
      "\106\117\122\127\101\122\104",
      "\106\117\122\127\101\122\104\105\116\104",
      "\102\101\103\113\127\101\122\104",
      "\102\101\103\113\127\101\122\104\105\116\104",
      "\123\124\101\124\111\117\116\123",
      "\123\124\101\124\111\117\116\123\105\116\104",
      "\123\105\107\115\105\116\124\105\116\104",
      "\103\111\124\131",
      "\103\111\124\131\105\116\104",
      "\103\111\124\131\103\117\104\105",
      "\103\111\124\131\103\117\104\105\137\105\116\104",
      "\103\111\124\131\116\101\115\105",
      "\103\111\124\131\116\101\115\105\137\105\116\104",
      "\114\111\116\105\124\131\120\105",
      "\114\111\116\105\124\131\120\105\137\105\116\104",
      "\115\125\114\124\111\137\116\101\115\105\104\137\116\117\104\105",
      "\115\125\114\124\111\137\116\101\115\105\104\137\116\117\104\105\137\105\116\104",
      "\123\105\122\126\111\103\105\124\131\120\105",
      "\123\105\122\126\111\103\105\124\131\120\105\105\116\104",
      "\115\105\124\122\117\137\124\122\101\116\123\106\117\122\115",
      "\115\105\124\122\117\137\124\122\101\116\123\106\117\122\115\137\105\116\104",
      "\124\122\101\116\123\106\117\122\115\137\120\117\111\116\124",
      "\124\122\101\116\123\106\117\122\115\137\120\117\111\116\124\137\105\116\104",
      "\102\105\106\117\122\105",
      "\102\105\106\117\122\105\137\105\116\104",
      "\101\106\124\105\122",
      "\101\106\124\105\122\137\105\116\104",
      "\114\111\116\105\137\122\105\115\101\122\113",
      "\114\111\116\105\137\122\105\115\101\122\113\137\105\116\104",
      "\114\111\116\105\137\105\104\111\124",
      "\114\111\116\105\137\105\104\111\124\137\105\116\104",
      "\114\111\116\105",
      "\114\111\116\105\137\105\116\104",
      "\114\111\116\105\137\116\101\115\105",
      "\114\111\116\105\137\116\101\115\105\137\105\116\104",
      "\116\101\115\105",
      "\116\101\115\105\137\105\116\104",
      "\117\126\105\122\122\111\104\105\137\123\105\107\115\105\116\124",
      "\117\126\105\122\122\111\104\105\137\123\105\107\115\105\116\124\137\105\116\104",
      "\117\126\105\122\122\111\104\105\137\123\105\103\124\111\117\116",
      "\117\126\105\122\122\111\104\105\137\123\124\101\124\111\117\116\123",
      "\117\126\105\122\122\111\104\105\137\123\105\103\124\111\117\116\137\105\116\104",
      null, };

  /** Lexer state names. */
  public static final String[] lexStateNames = { "DEFAULT", };
  static final long[] jjtoToken = { 0x3ffffffffffc1L, };
  static final long[] jjtoSkip = { 0x3eL, };
  static final long[] jjtoSpecial = { 0x20L, };
  protected SimpleCharStream input_stream;
  private final int[] jjrounds = new int[9];
  private final int[] jjstateSet = new int[18];
  protected char curChar;

  /** Constructor. */
  public SegParserTokenManager(SimpleCharStream stream) {
    if (SimpleCharStream.staticFlag)
      throw new Error(
          "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    input_stream = stream;
  }

  /** Constructor. */
  public SegParserTokenManager(SimpleCharStream stream, int lexState) {
    this(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream) {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0) {
      throw new TokenMgrError("Error: Ignoring invalid lexical state : "
          + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    }
    curLexState = lexState;
  }

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = jjstrLiteralImages[jjmatchedKind];
    curTokenImage = (im == null) ? input_stream.GetImage() : im;
    beginLine = input_stream.getBeginLine();
    beginColumn = input_stream.getBeginColumn();
    endLine = input_stream.getEndLine();
    endColumn = input_stream.getEndColumn();
    t = Token.newToken(jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token specialToken = null;
    Token matchedToken;
    int curPos = 0;

    EOFLoop: for (;;) {
      try {
        curChar = input_stream.BeginToken();
      } catch (java.io.IOException e) {
        jjmatchedKind = 0;
        matchedToken = jjFillToken();
        matchedToken.specialToken = specialToken;
        return matchedToken;
      }

      try {
        input_stream.backup(0);
        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
          curChar = input_stream.BeginToken();
      } catch (java.io.IOException e1) {
        continue EOFLoop;
      }
      jjmatchedKind = 0x7fffffff;
      jjmatchedPos = 0;
      curPos = jjMoveStringLiteralDfa0_0();
      if (jjmatchedKind != 0x7fffffff) {
        if (jjmatchedPos + 1 < curPos)
          input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          matchedToken.specialToken = specialToken;
          return matchedToken;
        }
        if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
          matchedToken = jjFillToken();
          if (specialToken == null)
            specialToken = matchedToken;
          else {
            matchedToken.specialToken = specialToken;
            specialToken = (specialToken.next = matchedToken);
          }
        }
        continue EOFLoop;
      }
      int error_line = input_stream.getEndLine();
      int error_column = input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        input_stream.readChar();
        input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
          error_line++;
          error_column = 0;
        } else
          error_column++;
      }
      if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
      }
      throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column,
          error_after, curChar, TokenMgrError.LEXICAL_ERROR);
    }
  }

  private void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  private void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

}
