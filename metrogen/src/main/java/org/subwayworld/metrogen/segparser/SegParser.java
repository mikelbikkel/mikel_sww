/* Generated By:JavaCC: Do not edit this line. SegParser.java */
package org.subwayworld.metrogen.segparser;

import java.util.List;
import java.util.ArrayList;
import org.subwayworld.metrogen.IMetroHandler;
import org.subwayworld.metrogen.MetroException;

public class SegParser implements SegParserConstants {

  private IMetroHandler m_handler;

  public void setHandler(IMetroHandler mh) {
    m_handler = mh;
  }

  public String stripQuotes(String t) {
    String tmp = t.replace("\u005c"", " ");
    return tmp.trim();
  }

  /*
   * Section 3: Parser specification
   */
  final public void CompilationUnit() throws ParseException, MetroException {
    CityDeclaration();
    label_1: while (true) {
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case K_SEGMENT:
      case K_MULTI_NAMED_NODE:
      case K_METRO_TRANSFORM:
      case K_LINE:
      case K_OVERRIDE_SEGMENT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case K_SEGMENT:
        SegmentDeclaration();
        break;
      case K_OVERRIDE_SEGMENT:
        OverrideSegmentDeclaration();
        break;
      case K_LINE:
        LineDeclaration();
        break;
      case K_METRO_TRANSFORM:
        MetroTransformDeclaration();
        break;
      case K_MULTI_NAMED_NODE:
        MultiNamedNodeDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void LineDeclaration() throws ParseException, MetroException {
    Token tknName;
    String svtype = null;
    String remark = null;
    String einfo = null;
    jj_consume_token(K_LINE);
    jj_consume_token(K_LINE_NAME);
    tknName = jj_consume_token(Id);
    jj_consume_token(K_LINE_NAME_END);
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case K_SERVICE_TYPE:
      svtype = ServiceType();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case K_LINE_REMARK:
      remark = LineRemark();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case K_LINE_EDIT:
      einfo = LineEdit();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(K_LINE_END);
    m_handler.addLine(stripQuotes(tknName.image), svtype, remark, einfo);
  }

  final public void SegmentDeclaration() throws ParseException, MetroException {
    String fwd = null;
    String bck = null;
    List<String> stats = null;
    jj_consume_token(K_SEGMENT);
    fwd = ForwardDirections();
    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
    case K_BACKWARD:
      bck = BackwardDirections();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    stats = Stations();
    jj_consume_token(K_SEGMENTEND);
    m_handler.addSegment(fwd, bck, stats);
  }

  final public void OverrideSegmentDeclaration() throws ParseException,
      MetroException {
    Token t = null;
    jj_consume_token(K_OVERRIDE_SEGMENT);
    jj_consume_token(K_FORWARD);
    t = jj_consume_token(Id);
    jj_consume_token(K_FORWARDEND);
    m_handler.startOverride(stripQuotes(t.image));
    label_2: while (true) {
      OverrideSection();
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case K_OVERRIDE_SECTION:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(K_OVERRIDE_SEGMENT_END);
    m_handler.endOverride();
  }

  final public void OverrideSection() throws ParseException, MetroException {
    Token t = null;
    List<String> s = null;
    jj_consume_token(K_OVERRIDE_SECTION);
    t = jj_consume_token(Id);
    jj_consume_token(K_OVERRIDE_STATIONS);
    s = StationList();
    jj_consume_token(K_OVERRIDE_SECTION_END);
    m_handler.addOverrideSection(stripQuotes(t.image), s);
  }

  final public String ServiceType() throws ParseException {
    Token t;
    jj_consume_token(K_SERVICE_TYPE);
    t = jj_consume_token(Id);
    jj_consume_token(K_SERVICE_TYPE_END);
    return stripQuotes(t.image);
  }

  final public String LineRemark() throws ParseException {
    Token t;
    jj_consume_token(K_LINE_REMARK);
    t = jj_consume_token(Id);
    jj_consume_token(K_LINE_REMARK_END);
    return stripQuotes(t.image);
  }

  final public String LineEdit() throws ParseException {
    Token t;
    jj_consume_token(K_LINE_EDIT);
    t = jj_consume_token(Id);
    jj_consume_token(K_LINE_EDIT_END);
    return stripQuotes(t.image);
  }

  final public void MultiNamedNodeDeclaration() throws ParseException,
      MetroException {
    List<String> r;
    jj_consume_token(K_MULTI_NAMED_NODE);
    r = StationList();
    jj_consume_token(K_MULTI_NAMED_NODE_END);
    m_handler.addMultiNamedNode(r);
  }

  final public void MetroTransformDeclaration() throws ParseException,
      MetroException {
    Token tknStation;
    Token tknBefore;
    Token tknAfter;
    jj_consume_token(K_METRO_TRANSFORM);
    jj_consume_token(K_TRANSFORM_POINT);
    tknStation = jj_consume_token(Id);
    jj_consume_token(K_TRANSFORM_POINT_END);
    jj_consume_token(K_BEFORE);
    tknBefore = jj_consume_token(Id);
    jj_consume_token(K_BEFORE_END);
    jj_consume_token(K_AFTER);
    tknAfter = jj_consume_token(Id);
    jj_consume_token(K_AFTER_END);
    jj_consume_token(K_METRO_TRANSFORM_END);
    m_handler.addMetroTransformation(stripQuotes(tknStation.image),
        stripQuotes(tknBefore.image), stripQuotes(tknAfter.image));
  }

  final public void CityDeclaration() throws ParseException, MetroException {
    Token t;
    Token t2;
    Token t3;
    jj_consume_token(K_CITY);
    jj_consume_token(K_CITYNAME);
    t = jj_consume_token(Id);
    jj_consume_token(K_CITYNAME_END);
    jj_consume_token(K_CITYCODE);
    t2 = jj_consume_token(Id);
    jj_consume_token(K_CITYCODE_END);
    jj_consume_token(K_LINETYPE);
    t3 = jj_consume_token(Id);
    jj_consume_token(K_LINETYPE_END);
    m_handler.setCity(stripQuotes(t.image), stripQuotes(t2.image),
        stripQuotes(t3.image));
    jj_consume_token(K_CITYEND);
  }

  final public List<String> Stations() throws ParseException {
    List<String> r;
    jj_consume_token(K_STATIONS);
    r = StationList();
    jj_consume_token(K_STATIONSEND);
    return r;
  }

  final public String ForwardDirections() throws ParseException {
    Token t;
    jj_consume_token(K_FORWARD);
    t = jj_consume_token(Id);
    jj_consume_token(K_FORWARDEND);
    return stripQuotes(t.image);
  }

  final public String BackwardDirections() throws ParseException {
    Token t;
    jj_consume_token(K_BACKWARD);
    t = jj_consume_token(Id);
    jj_consume_token(K_BACKWARDEND);
    return stripQuotes(t.image);
  }

  final public List<String> StationList() throws ParseException {
    List<String> lst = new ArrayList<>();
    Token t;
    label_3: while (true) {
      t = jj_consume_token(Id);
      lst.add(stripQuotes(t.image));
      switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
      case Id:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
    }
    return lst;
  }

  /** Generated Token Manager. */
  public SegParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
    jj_la1_init_0();
    jj_la1_init_1();
  }

  private static void jj_la1_init_0() {
    jj_la1_0 = new int[] { 0x4400040, 0x4400040, 0x1000000, 0x0, 0x0, 0x200,
        0x0, 0x0, };
  }

  private static void jj_la1_init_1() {
    jj_la1_1 = new int[] { 0x1040, 0x1040, 0x0, 0x4, 0x10, 0x0, 0x4000,
        0x20000, };
  }

  /** Constructor with InputStream. */
  public SegParser(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public SegParser(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source = new SegParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    ReInit(stream, null);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Constructor. */
  public SegParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SegParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SegParser(SegParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SegParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++)
      jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  /** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null)
      token = token.next;
    else
      token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  /** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null)
        t = t.next;
      else
        t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt = token.next) == null) {
      return (jj_ntk = (token.next = token_source.getNextToken()).kind);
    }
    return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1 << j)) != 0) {
            la1tokens[32 + j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
